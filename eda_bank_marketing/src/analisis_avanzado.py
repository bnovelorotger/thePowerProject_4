#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
An치lisis Avanzado - Marketing Bancario
Autor: Bernardo Novelo Rotger
Fecha: 28/08/2025
Descripci칩n: An치lisis avanzado con segmentaci칩n y cohortes
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
import warnings
warnings.filterwarnings('ignore')

def segmentar_clientes(df):
    """Segmenta clientes usando clustering"""
    print("Segmentando clientes...")
    
    # Seleccionar variables para segmentaci칩n
    segment_vars = ['age', 'campaign', 'duration', 'emp_var_rate', 'cons_price_idx']
    segment_df = df[segment_vars].dropna()
    
    # Estandarizar variables
    scaler = StandardScaler()
    segment_scaled = scaler.fit_transform(segment_df)
    
    # Aplicar PCA para reducci칩n de dimensionalidad
    pca = PCA(n_components=3)
    segment_pca = pca.fit_transform(segment_scaled)
    
    # Clustering con K-means
    kmeans = KMeans(n_clusters=4, random_state=42)
    clusters = kmeans.fit_predict(segment_pca)
    
    # A침adir clusters al dataframe
    segment_df['cluster'] = clusters
    
    # An치lisis de clusters
    cluster_analysis = segment_df.groupby('cluster').agg({
        'age': ['mean', 'count'],
        'campaign': 'mean',
        'duration': 'mean',
        'emp_var_rate': 'mean'
    }).round(2)
    
    print("Segmentaci칩n completada")
    print("\n游늵 An치lisis de Clusters:")
    print(cluster_analysis)
    
    return segment_df, clusters

def analisis_cohortes(df):
    """An치lisis de cohortes temporales"""
    print("\nAnalizando cohortes temporales...")
    
    if 'contact_month' in df.columns:
        # Crear cohortes por mes
        monthly_cohorts = df.groupby('contact_month')['y'].agg(['mean', 'count']).reset_index()
        
        # An치lisis de tendencias
        print("Tendencias mensuales de conversi칩n:")
        print(monthly_cohorts.sort_values('contact_month'))
        
        # Visualizaci칩n de cohortes
        plt.figure(figsize=(12, 6))
        plt.plot(monthly_cohorts['contact_month'], monthly_cohorts['mean'], 
                marker='o', linewidth=2, markersize=8)
        plt.title('Tasa de Conversi칩n por Mes', fontsize=16, fontweight='bold')
        plt.xlabel('Mes', fontsize=12)
        plt.ylabel('Tasa de Conversi칩n', fontsize=12)
        plt.grid(True, alpha=0.3)
        plt.xticks(rotation=45)
        plt.tight_layout()
        plt.savefig('../figures/cohortes_temporales.png', dpi=300, bbox_inches='tight')
        plt.close()
        print("Gr치fico de cohortes guardado")
        
        return monthly_cohorts
    
    return None

def analisis_roi_campanas(df):
    """An치lisis de ROI por campa침a"""
    print("\nAnalizando ROI de campa침as...")
    
    # Simular costos (en un caso real vendr칤an de datos externos)
    cost_per_contact = 2.5  # Euros por contacto
    
    # Calcular m칠tricas por campa침a
    campaign_roi = df.groupby('campaign').agg({
        'y': ['mean', 'count'],
        'duration': 'mean'
    }).round(4)
    
    campaign_roi.columns = ['conversion_rate', 'total_contacts', 'avg_duration']
    
    # Calcular costos y ROI
    campaign_roi['total_cost'] = campaign_roi['total_contacts'] * cost_per_contact
    campaign_roi['conversions'] = campaign_roi['total_contacts'] * campaign_roi['conversion_rate']
    
    # Valor promedio por conversi칩n (simulado)
    avg_conversion_value = 500  # Euros
    campaign_roi['total_revenue'] = campaign_roi['conversions'] * avg_conversion_value
    campaign_roi['roi'] = (campaign_roi['total_revenue'] - campaign_roi['total_cost']) / campaign_roi['total_cost']
    
    print("ROI por N칰mero de Contactos:")
    print(campaign_roi.round(4))
    
    # Identificar campa침as m치s rentables
    profitable_campaigns = campaign_roi[campaign_roi['roi'] > 0]
    print(f"\nCampa침as Rentables (ROI > 0): {len(profitable_campaigns)}")
    
    return campaign_roi

def analisis_estacionalidad(df):
    """An치lisis de patrones estacionales"""
    print("\nAnalizando patrones estacionales...")
    
    if 'contact_month' in df.columns:
        # An치lisis por mes
        monthly_patterns = df.groupby('contact_month').agg({
            'y': 'mean',
            'campaign': 'mean',
            'duration': 'mean'
        }).round(4)
        
        print("Patrones Mensuales:")
        print(monthly_patterns)
        
        # Identificar mejores y peores meses
        best_month = monthly_patterns['y'].idxmax()
        worst_month = monthly_patterns['y'].idxmin()
        
        print(f"\nMejor mes: {best_month} (Conversi칩n: {monthly_patterns.loc[best_month, 'y']:.2%})")
        print(f"Peor mes: {worst_month} (Conversi칩n: {monthly_patterns.loc[worst_month, 'y']:.2%})")
        
        return monthly_patterns
    
    return None

def generar_reporte_avanzado(df):
    """Genera reporte completo de an치lisis avanzado"""
    print("\nGenerando Reporte Avanzado...")
    
    # 1. Segmentaci칩n
    segment_df, clusters = segmentar_clientes(df)
    
    # 2. An치lisis de cohortes
    cohortes = analisis_cohortes(df)
    
    # 3. ROI de campa침as
    roi_campanas = analisis_roi_campanas(df)
    
    # 4. Estacionalidad
    estacionalidad = analisis_estacionalidad(df)
    
    # 5. Guardar resultados
    segment_df.to_csv('../data/processed/clientes_segmentados.csv', index=False)
    roi_campanas.to_csv('../data/processed/roi_campanas.csv')
    
    print("\nReporte Avanzado Completado!")
    print("Archivos generados:")
    print("   - clientes_segmentados.csv")
    print("   - roi_campanas.csv")
    print("   - cohortes_temporales.png")
    
    return {
        'segmentacion': segment_df,
        'cohortes': cohortes,
        'roi': roi_campanas,
        'estacionalidad': estacionalidad
    }

def main():
    """Funci칩n principal"""
    print("Iniciando An치lisis Avanzado - Marketing Bancario")
    print("=" * 60)
    
    try:
        # Cargar datos procesados
        df = pd.read_csv('../data/processed/bank_customers_merged.csv')
        print(f"Datos cargados: {df.shape}")
        
        # Ejecutar an치lisis avanzado
        resultados = generar_reporte_avanzado(df)
        
        print("\nAn치lisis avanzado completado exitosamente!")
        
    except Exception as e:
        print(f"Error: {str(e)}")

if __name__ == "__main__":
    main() 